<application>
  <component name="AppStorage">
    <histories>
      <item value="Interceptor" />
      <item value="milliseconds" />
      <item value="/** * Equivalent to * {@link #convert(long, TimeUnit) MILLISECONDS.convert(duration, this)}. * @param duration the duration * @return the converted duration, * or {@code Long.MIN_VALUE} if conversion would negatively * overflow, or {@code Long.MAX_VALUE} if it would positively overflow. */" />
      <item value="/** * Sets the default connect timeout for new connections. A value of 0 means no timeout, * otherwise values must be between 1 and {@link Integer#MAX_VALUE} when converted to * milliseconds. * * &lt;p&gt;The connect timeout is applied when connecting a TCP socket to the target host. * The default value is 10 seconds. */" />
      <item value="allocated" />
      <item value="Perform the internal processing required to invalidate this session, * without triggering an exception if the session has already expired." />
      <item value="Zone Offset" />
      <item value="/** * Converts this date-time to the number of seconds from the epoch * of 1970-01-01T00:00:00Z. * &lt;p&gt; * This combines this local date-time and the specified offset to calculate the * epoch-second value, which is the number of elapsed seconds from 1970-01-01T00:00:00Z. * Instants on the time-line after the epoch are positive, earlier are negative. * &lt;p&gt; * This default implementation calculates from the epoch-day of the date and the * second-of-day of the time. * * @param offset the offset to use for the conversion, not null * @return the number of seconds from the epoch of 1970-01-01T00:00:00Z */" />
      <item value="/** * The milli-of-second. * &lt;p&gt; * This counts the millisecond within the second, from 0 to 999. * This field has the same meaning for all calendar systems. * &lt;p&gt; * This field is used to represent the milli-of-second handling any fraction of the second. * Implementations of {@code TemporalAccessor} should provide a value for this field if * they can return a value for {@link #SECOND_OF_MINUTE}, {@link #SECOND_OF_DAY} or * {@link #INSTANT_SECONDS} filling unknown precision with zero. * &lt;p&gt; * When this field is used for setting a value, it should behave in the same way as * setting {@link #NANO_OF_SECOND} with the value multiplied by 1,000,000. * &lt;p&gt; * When parsing this field it behaves equivalent to the following: * The value is validated in strict and smart mode but not in lenient mode. * The field is resolved in combination with {@code MICRO_OF_SECOND} to produce * {@code NANO_OF_SECOND}. */" />
      <item value="/** * The micro-of-second. * &lt;p&gt; * This counts the microsecond within the second, from 0 to 999,999. * This field has the same meaning for all calendar systems. * &lt;p&gt; * This field is used to represent the micro-of-second handling any fraction of the second. * Implementations of {@code TemporalAccessor} should provide a value for this field if * they can return a value for {@link #SECOND_OF_MINUTE}, {@link #SECOND_OF_DAY} or * {@link #INSTANT_SECONDS} filling unknown precision with zero. * &lt;p&gt; * When this field is used for setting a value, it should behave in the same way as * setting {@link #NANO_OF_SECOND} with the value multiplied by 1,000. * &lt;p&gt; * When parsing this field it behaves equivalent to the following: * The value is validated in strict and smart mode but not in lenient mode. * The field is resolved in combination with {@code MILLI_OF_SECOND} to produce * {@code NANO_OF_SECOND}. */" />
      <item value="/** * The nano-of-second. * &lt;p&gt; * This counts the nanosecond within the second, from 0 to 999,999,999. * This field has the same meaning for all calendar systems. * &lt;p&gt; * This field is used to represent the nano-of-second handling any fraction of the second. * Implementations of {@code TemporalAccessor} should provide a value for this field if * they can return a value for {@link #SECOND_OF_MINUTE}, {@link #SECOND_OF_DAY} or * {@link #INSTANT_SECONDS} filling unknown precision with zero. * &lt;p&gt; * When this field is used for setting a value, it should set as much precision as the * object stores, using integer division to remove excess precision. * For example, if the {@code TemporalAccessor} stores time to millisecond precision, * then the nano-of-second must be divided by 1,000,000 before replacing the milli-of-second. * &lt;p&gt; * When parsing this field it behaves equivalent to the following: * The value is validated in strict and smart mode but not in lenient mode. * The field is resolved in combination with {@code MILLI_OF_SECOND} and {@code MICRO_OF_SECOND}. */" />
      <item value="/** * The hour-of-day. * &lt;p&gt; * This counts the hour within the day, from 0 to 23. * This is the hour that would be observed on a standard 24-hour digital clock. * This field has the same meaning for all calendar systems. * &lt;p&gt; * When parsing this field it behaves equivalent to the following: * The value is validated in strict and smart mode but not in lenient mode. * The field is combined with {@code MINUTE_OF_HOUR}, {@code SECOND_OF_MINUTE} and * {@code NANO_OF_SECOND} to produce a {@code LocalTime}. * In lenient mode, any excess days are added to the parsed date, or * made available via {@link java.time.format.DateTimeFormatter#parsedExcessDays()}. */" />
      <item value="/** * Processes a method invocation on a proxy instance and returns * the result. This method will be invoked on an invocation handler * when a method is invoked on a proxy instance that it is * associated with. * * @param proxy the proxy instance that the method was invoked on * * @param method the {@code Method} instance corresponding to * the interface method invoked on the proxy instance. The declaring * class of the {@code Method} object will be the interface that * the method was declared in, which may be a superinterface of the * proxy interface that the proxy class inherits the method through. * * @param args an array of objects containing the values of the * arguments passed in the method invocation on the proxy instance, * or {@code null} if interface method takes no arguments. * Arguments of primitive types are wrapped in instances of the * appropriate primitive wrapper class, such as * {@code java.lang.Integer} or {@code java.lang.Boolean}. * * @return the value to return from the method invocation on the * proxy instance. If the declared return type of the interface * method is a primitive type, then the value returned by * this method must be an instance of the corresponding primitive * wrapper class; otherwise, it must be a type assignable to the * declared return type. If the value returned by this method is * {@code null} and the interface method's return type is * primitive, then a {@code NullPointerException} will be * thrown by the method invocation on the proxy instance. If the * value returned by this method is otherwise not compatible with * the interface method's declared return type as described above, * a {@code ClassCastException} will be thrown by the method * invocation on the proxy instance. * * @throws Throwable the exception to throw from the method * invocation on the proxy instance. The exception's type must be * assignable either to any of the exception types declared in the * {@code throws} clause of the interface method or to the * unchecked exception types {@code java.lang.RuntimeException} * or {@code java.lang.Error}. If a checked exception is * thrown by this method that is not assignable to any of the * exception types declared in the {@code throws} clause of * the interface method, then an * {@link UndeclaredThrowableException} containing the * exception that was thrown by this method will be thrown by the * method invocation on the proxy instance. * * @see UndeclaredThrowableException */" />
      <item value="difficult" />
      <item value="easys" />
      <item value="easies" />
      <item value="Ratio" />
      <item value="quiz Rule" />
      <item value="/** * Only include fields and methods explicitly marked with {@code @EqualsAndHashCode.Include}. * Normally, all (non-static, non-transient) fields are included by default. * * @return If {@code true}, don't include non-static non-transient fields automatically (default: {@code false}). */" />
      <item value="Configure the behaviour of how this member is treated in the {@code equals} and {@code hashCode} implementation; if on a method, include the method's return value as part of calculating hashCode/equality." />
      <item value="/** * Defaults to the method name of the annotated member. * If on a method and the name equals the name of a default-included field, this member takes its place. * * @return If present, this method serves as replacement for the named field. */" />
      <item value="/** * Creates the directory named by this abstract pathname, including any * necessary but nonexistent parent directories. Note that if this * operation fails it may have succeeded in creating some of the necessary * parent directories. * * @return &lt;code&gt;true&lt;/code&gt; if and only if the directory was created, * along with all necessary parent directories; &lt;code&gt;false&lt;/code&gt; * otherwise * * @throws SecurityException * If a security manager exists and its &lt;code&gt;{@link * java.lang.SecurityManager#checkRead(java.lang.String)}&lt;/code&gt; * method does not permit verification of the existence of the * named directory and all necessary parent directories; or if * the &lt;code&gt;{@link * java.lang.SecurityManager#checkWrite(java.lang.String)}&lt;/code&gt; * method does not permit the named directory and all necessary * parent directories to be created */" />
      <item value="/** * Interface to be implemented by @{@link org.springframework.context.annotation.Configuration * Configuration} classes annotated with @{@link EnableAsync} that wish to customize the * {@link Executor} instance used when processing async method invocations or the * {@link AsyncUncaughtExceptionHandler} instance used to process exception thrown from * async method with {@code void} return type. * * &lt;p&gt;Consider using {@link AsyncConfigurerSupport} providing default implementations for * both methods if only one element needs to be customized. Furthermore, backward compatibility * of this interface will be insured in case new customization options are introduced * in the future. * * &lt;p&gt;See @{@link EnableAsync} for usage examples. * * @author Chris Beams * @author Stephane Nicoll * @since 3.1 * @see AbstractAsyncConfiguration * @see EnableAsync * @see AsyncConfigurerSupport */" />
      <item value="Create new {@link RedisCacheWriter} without locking behavior." />
      <item value="Cache Manager" />
      <item value="/** * This interface represents the abstract notion of a principal, which * can be used to represent any entity, such as an individual, a * corporation, and a login id. * * @see java.security.cert.X509Certificate * * @author Li Gong */" />
      <item value="/** * Returns true if the specified subject is implied by this principal. * * &lt;p&gt;The default implementation of this method returns true if * {@code subject} is non-null and contains at least one principal that * is equal to this principal. * * &lt;p&gt;Subclasses may override this with a different implementation, if * necessary. * * @param subject the {@code Subject} * @return true if {@code subject} is non-null and is * implied by this principal, or false otherwise. * @since 1.8 */" />
      <item value="/** * Represents the token for an authentication request or for an authenticated principal * once the request has been processed by the * {@link AuthenticationManager#authenticate(Authentication)} method. * &lt;p&gt; * Once the request has been authenticated, the &lt;tt&gt;Authentication&lt;/tt&gt; will usually be * stored in a thread-local &lt;tt&gt;SecurityContext&lt;/tt&gt; managed by the * {@link SecurityContextHolder} by the authentication mechanism which is being used. An * explicit authentication can be achieved, without using one of Spring Security's * authentication mechanisms, by creating an &lt;tt&gt;Authentication&lt;/tt&gt; instance and using * the code: * * &lt;pre&gt; * SecurityContextHolder.getContext().setAuthentication(anAuthentication); * &lt;/pre&gt; * * Note that unless the &lt;tt&gt;Authentication&lt;/tt&gt; has the &lt;tt&gt;authenticated&lt;/tt&gt; property * set to &lt;tt&gt;true&lt;/tt&gt;, it will still be authenticated by any security interceptor (for * method or web invocations) which encounters it. * &lt;p&gt; * In most cases, the framework transparently takes care of managing the security context * and authentication objects for you. * * @author Ben Alex */" />
      <item value="/* * Copyright 2004, 2005, 2006 Acegi Technology Pty Limited * * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * https://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package org.springframework.security.core; import java.io.Serializable;&#10;import java.security.Principal;&#10;import java.util.Collection; import org.springframework.security.authentication.AuthenticationManager;&#10;import org.springframework.security.core.context.SecurityContextHolder; /** * Represents the token for an authentication request or for an authenticated principal * once the request has been processed by the * {@link AuthenticationManager#authenticate(Authentication)} method. * &lt;p&gt; * Once the request has been authenticated, the &lt;tt&gt;Authentication&lt;/tt&gt; will usually be * stored in a thread-local &lt;tt&gt;SecurityContext&lt;/tt&gt; managed by the * {@link SecurityContextHolder} by the authentication mechanism which is being used. An * explicit authentication can be achieved, without using one of Spring Security's * authentication mechanisms, by creating an &lt;tt&gt;Authentication&lt;/tt&gt; instance and using * the code: * * &lt;pre&gt; * SecurityContextHolder.getContext().setAuthentication(anAuthentication); * &lt;/pre&gt; * * Note that unless the &lt;tt&gt;Authentication&lt;/tt&gt; has the &lt;tt&gt;authenticated&lt;/tt&gt; property * set to &lt;tt&gt;true&lt;/tt&gt;, it will still be authenticated by any security interceptor (for * method or web invocations) which encounters it. * &lt;p&gt; * In most cases, the framework transparently takes care of managing the security context * and authentication objects for you. * * @author Ben Alex */&#10;public interface Authentication extends Principal, Serializable { // ~ Methods // ======================================================================================================== /** * Set by an &lt;code&gt;AuthenticationManager&lt;/code&gt; to indicate the authorities that the * principal has been granted. Note that classes should not rely on this value as * being valid unless it has been set by a trusted &lt;code&gt;AuthenticationManager&lt;/code&gt;. * &lt;p&gt; * Implementations should ensure that modifications to the returned collection array * do not affect the state of the Authentication object, or use an unmodifiable * instance. * &lt;/p&gt; * * @return the authorities granted to the principal, or an empty collection if the * token has not been authenticated. Never null. */ Collection&lt;? extends GrantedAuthority&gt; getAuthorities(); /** * The credentials that prove the principal is correct. This is usually a password, * but could be anything relevant to the &lt;code&gt;AuthenticationManager&lt;/code&gt;. Callers * are expected to populate the credentials. * * @return the credentials that prove the identity of the &lt;code&gt;Principal&lt;/code&gt; */ Object getCredentials(); /** * Stores additional details about the authentication request. These might be an IP * address, certificate serial number etc. * * @return additional details about the authentication request, or &lt;code&gt;null&lt;/code&gt; * if not used */ Object getDetails(); /** * The identity of the principal being authenticated. In the case of an authentication * request with username and password, this would be the username. Callers are * expected to populate the principal for an authentication request. * &lt;p&gt; * The &lt;tt&gt;AuthenticationManager&lt;/tt&gt; implementation will often return an * &lt;tt&gt;Authentication&lt;/tt&gt; containing richer information as the principal for use by * the application. Many of the authentication providers will create a * {@code UserDetails} object as the principal. * * @return the &lt;code&gt;Principal&lt;/code&gt; being authenticated or the authenticated * principal after authentication. */ Object getPrincipal(); /** * Used to indicate to {@code AbstractSecurityInterceptor} whether it should present * the authentication token to the &lt;code&gt;AuthenticationManager&lt;/code&gt;. Typically an * &lt;code&gt;AuthenticationManager&lt;/code&gt; (or, more often, one of its * &lt;code&gt;AuthenticationProvider&lt;/code&gt;s) will return an immutable authentication token * after successful authentication, in which case that token can safely return * &lt;code&gt;true&lt;/code&gt; to this method. Returning &lt;code&gt;true&lt;/code&gt; will improve * performance, as calling the &lt;code&gt;AuthenticationManager&lt;/code&gt; for every request * will no longer be necessary. * &lt;p&gt; * For security reasons, implementations of this interface should be very careful * about returning &lt;code&gt;true&lt;/code&gt; from this method unless they are either * immutable, or have some way of ensuring the properties have not been changed since * original creation. * * @return true if the token has been authenticated and the * &lt;code&gt;AbstractSecurityInterceptor&lt;/code&gt; does not need to present the token to the * &lt;code&gt;AuthenticationManager&lt;/code&gt; again for re-authentication. */ boolean isAuthenticated(); /** * See {@link #isAuthenticated()} for a full description. * &lt;p&gt; * Implementations should &lt;b&gt;always&lt;/b&gt; allow this method to be called with a * &lt;code&gt;false&lt;/code&gt; parameter, as this is used by various classes to specify the * authentication token should not be trusted. If an implementation wishes to reject * an invocation with a &lt;code&gt;true&lt;/code&gt; parameter (which would indicate the * authentication token is trusted - a potential security risk) the implementation * should throw an {@link IllegalArgumentException}. * * @param isAuthenticated &lt;code&gt;true&lt;/code&gt; if the token should be trusted (which may * result in an exception) or &lt;code&gt;false&lt;/code&gt; if the token should not be trusted * * @throws IllegalArgumentException if an attempt to make the authentication token * trusted (by passing &lt;code&gt;true&lt;/code&gt; as the argument) is rejected due to the * implementation being immutable or implementing its own alternative approach to * {@link #isAuthenticated()} */ void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException;&#10;}" />
      <item value="simply" />
      <item value="Authenticator" />
      <item value="deprecation" />
      <item value="/** * Set the underlying connect timeout in milliseconds. * A value of 0 specifies an infinite timeout. */" />
      <item value="/** * If you specify a static constructor name, then the generated constructor will be private, and * instead a static factory method is created that other classes can use to create instances. * We suggest the name: &quot;of&quot;, like so: * * &lt;pre&gt; * public @Data(staticConstructor = &quot;of&quot;) class Point { final int x, y; } * &lt;/pre&gt; * * Default: No static constructor, instead the normal constructor is public. * * @return Name of static 'constructor' method to generate (blank = generate a normal constructor). */" />
      <item value="/** * If present, explicitly lists the fields that are to be used for identity. * Normally, all non-static, non-transient fields are used for identity. * &lt;p&gt; * Mutually exclusive with {@link #exclude()}. * &lt;p&gt; * Will soon be marked {@code @Deprecated}; use the {@code @EqualsAndHashCode.Include} annotation together with {@code @EqualsAndHashCode(onlyExplicitlyIncluded = true)}. * * @return A list of fields to use (&lt;em&gt;default&lt;/em&gt;: all of them). */" />
      <item value="/** * Any fields listed here will not be taken into account in the generated {@code equals} and {@code hashCode} implementations. * Mutually exclusive with {@link #of()}. * &lt;p&gt; * Will soon be marked {@code @Deprecated}; use the {@code @EqualsAndHashCode.Exclude} annotation instead. * * @return A list of fields to exclude. */" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="42" />
        <entry key="ENGLISH" value="43" />
      </map>
    </option>
  </component>
</application>